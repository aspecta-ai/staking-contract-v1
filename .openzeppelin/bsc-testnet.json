{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x4f08c06EeF68Bd7a77c939Adf5fB81Be9435D0a0",
      "txHash": "0x90f615b5c211386348ddd557b98eb2d7eb67149653cea4cba1090a34da25f2fc",
      "kind": "uups"
    },
    {
      "address": "0x680AB87eeec250726Fd9a756Bd9C51c456aDb9Cf",
      "txHash": "0xf7d1cac60d84a9c467fc774ce413b7ea887b1d1f4d04203b63917e854d992b59",
      "kind": "uups"
    }
  ],
  "impls": {
    "e33a3b2ebf8fa493bd3314d13c110d05b41325f7df8f2bb4e91c579bb90abfe4": {
      "address": "0x1a590409abd6823ac7D8eA43431611376b0dBc79",
      "txHash": "0x78ebc828083634ce5958c32c50ea21160aa0fe04d44ee6d83a68d82ff1c70696",
      "layout": {
        "solcVersion": "0.8.25",
        "storage": [
          {
            "label": "__gap",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)50_storage",
            "contract": "AspectaBuildingPointStorageV1",
            "src": "contracts/AspectaBuildingPoint/AspectaBuildingPointStorage.sol:24"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)35_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)286_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)150_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "43faa5d194e907b3fe2a2f92d9901f81a97b1736666f0a59f8269c78b9fa3f6b": {
      "address": "0x506D549FE9A14c20BfC7f87c2c3e50930a443FB3",
      "txHash": "0x7e7a661e072f99649e48b52eaf06302c0b58eec72c932bfda58091aa1aef3342",
      "layout": {
        "solcVersion": "0.8.25",
        "storage": [
          {
            "label": "factory",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:21"
          },
          {
            "label": "developer",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:23"
          },
          {
            "label": "aspectaToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:25"
          },
          {
            "label": "inflationRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:27"
          },
          {
            "label": "shareDecayRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:29"
          },
          {
            "label": "rewardCut",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:31"
          },
          {
            "label": "defaultLockPeriod",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:33"
          },
          {
            "label": "buildIndex",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:35"
          },
          {
            "label": "rewardPerShare",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:37"
          },
          {
            "label": "lastRewardedBlockNum",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:39"
          },
          {
            "label": "devLastRewardPerShare",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:41"
          },
          {
            "label": "shareCoeff",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:43"
          },
          {
            "label": "stakerStates",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_struct(StakerState)6726_storage)",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "AspectaDevPoolStorageV1",
            "src": "contracts/AspectaDevPool/AspectaDevPoolStorage.sol:47"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)286_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)150_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)99_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_mapping(t_address,t_struct(StakerState)6726_storage)": {
            "label": "mapping(address => struct IAspectaDevPool.StakerState)",
            "numberOfBytes": "32"
          },
          "t_struct(StakerState)6726_storage": {
            "label": "struct IAspectaDevPool.StakerState",
            "members": [
              {
                "label": "stakeAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastRewardPerShare",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "unlockTime",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "d47e5c1ea1491ef094c9456948d7d6ea71a409276be7dc1c3c7c169d6ebaeebd": {
      "address": "0x68FB564b24da98dAe48DD32c0740442968A0559D",
      "txHash": "0xc83a4bd34bd0a722389df9d859cd442b8740bd43e48fcf49a622e34d0728101c",
      "layout": {
        "solcVersion": "0.8.25",
        "storage": [
          {
            "label": "beacon",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(UpgradeableBeacon)2927",
            "contract": "AspectaDevPoolFactoryStorageV1",
            "src": "contracts/AspectaDevPoolFactory/AspectaDevPoolFactoryStorage.sol:30"
          },
          {
            "label": "defaultInflationRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "AspectaDevPoolFactoryStorageV1",
            "src": "contracts/AspectaDevPoolFactory/AspectaDevPoolFactoryStorage.sol:38"
          },
          {
            "label": "defaultShareDecayRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "AspectaDevPoolFactoryStorageV1",
            "src": "contracts/AspectaDevPoolFactory/AspectaDevPoolFactoryStorage.sol:41"
          },
          {
            "label": "defaultRewardCut",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "AspectaDevPoolFactoryStorageV1",
            "src": "contracts/AspectaDevPoolFactory/AspectaDevPoolFactoryStorage.sol:44"
          },
          {
            "label": "defaultLockPeriod",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "AspectaDevPoolFactoryStorageV1",
            "src": "contracts/AspectaDevPoolFactory/AspectaDevPoolFactoryStorage.sol:47"
          },
          {
            "label": "aspectaBuildingPoint",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(AspectaBuildingPoint)5847",
            "contract": "AspectaDevPoolFactoryStorageV1",
            "src": "contracts/AspectaDevPoolFactory/AspectaDevPoolFactoryStorage.sol:51"
          },
          {
            "label": "allPools",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage",
            "contract": "AspectaDevPoolFactoryStorageV1",
            "src": "contracts/AspectaDevPoolFactory/AspectaDevPoolFactoryStorage.sol:54"
          },
          {
            "label": "devPools",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_address)",
            "contract": "AspectaDevPoolFactoryStorageV1",
            "src": "contracts/AspectaDevPoolFactory/AspectaDevPoolFactoryStorage.sol:57"
          },
          {
            "label": "stakedDevSet",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_struct(AddressSet)5401_storage)",
            "contract": "AspectaDevPoolFactoryStorageV1",
            "src": "contracts/AspectaDevPoolFactory/AspectaDevPoolFactoryStorage.sol:60"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_uint256)50_storage",
            "contract": "AspectaDevPoolFactoryStorageV1",
            "src": "contracts/AspectaDevPoolFactory/AspectaDevPoolFactoryStorage.sol:64"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)35_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(InitializableStorage)150_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)99_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_contract(AspectaBuildingPoint)5847": {
            "label": "contract AspectaBuildingPoint",
            "numberOfBytes": "20"
          },
          "t_contract(UpgradeableBeacon)2927": {
            "label": "contract UpgradeableBeacon",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(AddressSet)5401_storage)": {
            "label": "mapping(address => struct EnumerableSet.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)5401_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5086_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Set)5086_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_positions",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    }
  }
}
